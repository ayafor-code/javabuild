JENKINS:
Jenkins
-------
	Jenkins is an open source automation server. 
	It helps automate the parts of software development
	related to building, testing, and deploying, 
	facilitating continuous integration, and continuous 
	delivery.

	It is used to continually create and test software 
	projects, making it easier for developers and 
	DevOps engineers to integrate changes to the 
	project and for consumers to get a new build. 

	Official Website: https://www.jenkins.io/

	DevOps Processes: 

	Plan  -> Requirement Gathering --> High level Document
	Code  -> Github Repo |  Automation 1
	Build -> Maven (build -> Validate, Compile, Test, Package)
	Test  -> Qualify the code (pox.xml and src)

	Continuous Integration -> Jenkins : 
	( Desired State vs Actual State)

	Jenkins -> GitHub  (Source Code Integration)   
	|
    Jenkins -> SonarQube (Code Quality Integration)
	|
    Jenkins -> Nexus (Artifactory Integration) 
	Back-Up & Sharing
	|
    Jenkins -> Amazon S3 Bucket Back-Up & Sharing
				(Amazon Simple Storage Service)
	

	CI = Continuous Integration | CD = Continuous Delivery 
	(Release - UAT), Conintuous	Deployment.

	The "CI" in CI/CD always refers to continuous 
	integration, an automation process for developers 
	that facilitates more frequent merging of code 
	changes back to a shared branch, or “trunk.” 
	As these updates are made, automated testing steps 
	are triggered to ensure the reliability of merged 
	code changes.   

	Jenkins, is an open source Continuous Integration 
	(ci/cd)	tool written in Java. 
	Jenkins achieves continuous integration with the help 
	of plugins. Every tool that has to be integrated has
	a plugin.

	Jenkins can be installed in Multiple Platforms:  
 	- Linux 
 	- Windows 
  	- MacOS 
  	
	
    Ticket
    ------
    Install Jenkins in RedHat9 server in AWS EC2 Instance 

        https://www.jenkins.io/doc/book/installing/linux/

    Jenkins makes use of plugins. 


#! bin/bash
#Author: Ayafor Emmanuel
#Date: August 21, 2024
sudo yum install wget git -y
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum install fontconfig java-17-openjdk -y
sudo yum install jenkins -y
sudo systemctl daemon-reload
sudo systemctl enable jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins
echo "jenkins installation successful"


netstat -lntu
sudo yum install net-tools -y
curl ifconfig.me
    __________________________

    Programmer (src) -> GitHub -> pull code 
    <-> Jenkins -> WebServer (php, html)
    Jenkins deploys the code to WebServer _ 
    End Users Access on browser
    Using publicIP address. 

    Acess Jenkins on browser using:    
    publicIP and port 8080
    3.20.224.109:8080/

   Get the inital access passWord on the file:
   sudo cat /var/lib/jenkins/secrets/initialAdminPassword 


project Repo:
https://github.com/ayafor-code/javabuild.git

https://github.com/ayafor-code/javabuild.git

I.JENKINS GITHUB INTEGRATION:

    I. Jenkins Steps
    ----------------

    1. New Item e.g. First Project/Job  

      -Freestyle Project
      -OK

    2. Source Code Management
      - Git -> Get the gitHub Repo url (https) and paste.
      - Specify branch */master | if code is in dev branch 
      	*/dev etc...
      
    3. Build Triggers
      - GitHub hook trigger for GITScm polling
      \\
      APPLY.

      II. GitHub Steps
      ----------------
      On the github repo, go to:
      - Settings
      - Webhook -> Add webhook (it might ask to login)
      - Payload URL -> Jenkins url 
      					(publicIP:port/github-webhook) 
      				   http://IP:8080/github-webhook/
      - Content Type: application/json
      - Which events would you like to trigger this webhook?
          	+ Let me select individual events.
          	   + Pushes
          	   + Pull requests
    \\
    Add Webhook.

    To see the build process in Jenkins:
    - Make a change or add content to the master* branch.
    - Check your Jenkins pipeline for a new build. 
    Webhook triggers automatic pull from the github 
    repo to Jenkins. 

    Build Triggers:
    - Trigger builds remotely (e.g., from scripts)
	- Build after other projects are built
	- Build periodically
	- GitHub hook trigger for GITScm polling
	- Poll SCM 

II.JENKINS MAVEN INTEGRATION:

	Maven Projects:
	Maven is integrated with Jenkins through the maven 
	plugin. This plugin automates the complete build  
	process.

	Maven Project:
	On the Jenkins UI, install the maven plugin:
		Manage Jenkins -> Plugins -> Click on 
		Available: In the search box, type maven ->
		Select on Maven Integration _ Install 

	Create a new Item: Now you will see "Maven Project" -> OK

	Jenkins needs to know where your Maven is installed.
    Please do so from the "tool configuration".
    Or Manage Jenkins --> Tools

    Tools:
    Add Maven
    Maven3.9.6
    Version 3.9.6
    Apply & Save.

    - Go back to the Dashboard,
    - Click on the Maven Project 
    - Configure
    - Under Build, add Goals and Options (clean package)

III.JENKINS SONARQUBE INTEGRATION:

mvn sonar:sonar :
----------------------------------------------  
NB: Your SonarQube server must be running 
    sudo su - sonar 
      sh /opt/sonarqube/bin/linux-x86-64/sonar.sh status
      sh /opt/sonarqube/bin/linux-x86-64/sonar.sh start 
      curl -v 34.213.64.100:9000 

    1. Edit pom.xml propertiesTAG with SonarQube server URL and login Credentials 
       in the Property TAG  
       http://172.31.23.193:9000/
       18.117.135.248:9000
         username: admin 
         password: admin 

      <Property>

2. Open required ports in Jenkins server to allow traffic from jenkins server
         port 9000 should be open in the firewall/security group

IV.JENKINS NEXUS INTEGRATION:

1. create, configure and setup a redhat server 
   with nexus installed   
   sudo systemctl start nexus

2. Create artifactories repos in nexus 
   NEXUSserverIP:portNumber 

   18.189.7.116:8081/
   http://18.189.7.116:8081/repository/maven-wp-release/
   http://18.189.7.116:8081/repository/maven-wp-snapshots/

3. modify 'distributionManagement' tag with nexus repos details  in  pom.xml
        vi pom.xml
  <distributionManagement>
      <repository>
        <id>nexus</id>
        <name>TechLink Releases Nexus Repository</name>
        <url>http://3.137.166.218:8081/repository/tesla-releases/</url>
      </repository>
      
      <snapshotRepository>
        <id>nexus</id>
        <name>TechLink Academy </name>
        <url>http://3.137.166.218:8081/repository/tesla-snapshots/</url>
      </snapshotRepository>
      
  </distributionManagement>

4. modify conf/setting.xml in JENKINS-server with nexus login credentials  
vi /var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven3.9.11/conf/settings.xml

            <server>
                <id>nexus</id>
                <username>admin</username>
                <password>admin123</password>
            </server>

5. Open required ports[8081] in Nexus server to allow traffic from jenkins server


V.JENKINS TOMCAT INTEGRATION:
create, configure and setup a redhat server 
with tomcat installed  
1. INSTALL 'Deploy To Container' Plugin on 
   Jenkins UI
   This plugin allows you to deploy a war to 
   a container after a successful build. 
2. ADD A TOMCAT USER in /tomcat9/conf/tomcat-users.xml


github repo: https://github.com/ayafor-code/javabuild.git 

username: ayafor-code

token(password): request for it.

branch: */main

Post Build Actions:
1. Deploy to Tomcat 
2. Slack Notification
       Manage Jenkins ->
       Plugins - Available Plugins
    Search -> Slack Notification
           -> Install

On Slack: Create New Channel 
         -> Go to Tools & Settings
         -> Manage Apps
         -> On the search bar type JenkinsCI
         -> Add Slack
         Choose Channel (the team;s channel)
         Follow the steps.

         On Jenkins UI, Manage Jenkins, System -> Slack
         Create credential (secret text)

Back to the Project:

Add Build Steps:
Slack Notification
Tick the notification types you wish to have in slack.
Save.

Plugin Management:
Manage Jenkins --> Plugins
    - Install  
    - Remove
    - Update 
    - Documentations for plugins

Example of plugins
    - Deploy to Container (Tomcat)
    - Maven Integration
    - Slack Notification
    - Next Build Number  
    - Audit Trail 
    - Job Import 
    - JACOCO
    - Blue Ocean
    - Publish Over SSH  
    - Convert to Pipeline
    - Timestamp 

Default Jenkins home dir /var/lib/jenkins



Jenkins Master & Slave Configuration:

Jenkins Agent, also known as Jenkins Node is a worker 
node that executes the tasks and builds assigned by 
the Jenkins Master. It works as a distributed system 
where the Jenkins Master assigns tasks to Jenkins Agents, 
which then execute the tasks on the machines they are 
running on.

Task on Slave1
1. Clone (git)
2. run mvn package (.war) maven

- Jenkins Node (Jenkins Server)
- Slave Node (A different server)
- Install ssh Agent plugin on the Master Node
  Manage Jenkins --> Plugins --> ssh agent
- Configure slave node: Manage Jenkins -> Manage Nodes
  Add Node and set the configuration.
- Install java in slave Nodes (same java version in master)

In a new job,
under General Configuration,
Restrict where this job can run and select the slave node.



Jenkins Installation Script:

#! bin/bash
#Author: Ayafor Emmanuel
#Date: August 21, 2024
sudo yum install wget git -y
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum install fontconfig java-17-openjdk -y
sudo yum install jenkins -y
sudo systemctl daemon-reload
sudo systemctl enable jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins
echo "jenkins installation successful"

Tomcat Installation
Nexus Installation  
SonarQube Installation 

packageManagementRepo

PIPELINE PROJECTS:

A Jenkins pipeline project is a way to define 
the entire build process, from start to 
finish, in code. This code is typically 
stored in a Jenkinsfile in the version control
repository (gitHub) of the project, allowing for easy 
versioning and tracking of changes. 
Jenkins pipelines provide a powerful way 
to implement Continuous Integration and 
Continuous Delivery (CI/CD) workflows, 
enabling automation of the build, test, and 
deployment processes. This helps teams to 
consistently build, test, and deploy their 
applications in a more streamlined and 
efficient manner.

The pipeline (worklow) script is written in 
Groovy Programming language.

Comments:

// is used to make a single line a comment.


/* 

*/ is used for multiline comments.

github repo: https://github.com/ayafor-code/javaWebApp.git

username: ayafor-code

token(password): request for it.

branch: */main

Our Pipeline Script 
====================
node{
 stage('1. cloneCode'){}
 stage('2. mavenBuild'){}
 stage('3. codeQA'){}
 stage('4. uploadArtifacts'){}
 stage('5. deployToUAT'){}
 stage('6. manualApproval'){}
 stage('7. deployToProd'){}
 stage('8. notification'){}
}


node{
def mavenHome = tool name: 'maven3.9.6'
 stage('1. cloneCode'){
  //git "https://github.com/ayafor-code/maven-employee-web-application.git"
   git branch: 'main', credentialsId: 'gitHubCred', url: 'https://github.com/ayafor-code/javaWebApp.git'
}
 stage('2. mavenBuild'){
 //sh "mvn package"
 //sh "/var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven3.9.6/bin/mvn package"
 sh "${mavenHome}/bin/mvn package" 
}
 stage('3. codeQualityAnalysis'){
  sh "${mavenHome}/bin/mvn sonar:sonar"
  //edit the pom.xml file with SonarQube server credentils(propertiesTAG)
}
 stage('4. uploadArtifacts'){
  sh "${mavenHome}/bin/mvn deploy"
  //modify the distributionManagement tag in pom.xml
}
stage('5. deployToUAT'){}
stage('6. manualApproval'){}

}

Stage 5.Deploying to UAT:

Install and Configure:
  - Jenkins server
  - Tomcat -UAT server
  - Tomcat -PROD server



Pipeline Script: Groovy Programming language

node{
 stage('1. cloneCode'){}
 stage('2. mavenBuild') {}
 stage('3. codeQA'){}
 stage('4. uploadArtifacts'){}
 stage('5. deployToUAT'){}
 stage('6. manualApproval'){}
 stage('7. deployToprod'){}
 stage('8. notification'){}
}

node{
 stage('1. cloneCode'){} gitHub Repository  
 stage('2. mavenBuild'){} mavenIntergration Plugin
 stage('3. codeQA'){} SonarQube
 stage('4. uploadArtifacts'){} Nexus
 stage('5. deployToUAT'){} TomcatUAT
 stage('6. manualApproval'){} 
 stage('7. deployToprod'){} TomcatProd
 stage('8. notification'){} Slack
}

github repo: https://github.com/ayafor-code/javabuild.git 

username: ayafor-code

token(password): ask me.

branch: */main

Plugins Needed: 
  - Deploy to container (deploy our artifact (.war) to tomcat)
  - Maven Integration (convert our src into the .war artifact)
  - Slack Notification (send notifications to our slack channels)
To install the above plugins,

On Jenkins UI, Click on:
  Manage Jenkins
  Plugins
  Available Plugins:
  Search and install.

Launch and Install an ec2-instance(t2.medium) and install jenkins
Jenkins Installation Script: Open port 8080
sudo yum install wget git -y
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum install java-11-openjdk-devel java-1.8.0-openjdk-devel -y
sudo yum install jenkins -y
sudo systemctl daemon-reload
sudo systemctl enable jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins
echo "jenkins installation successful"

Launch an ec2 redHat instance(t2.micro) and install tomcat
Tomcat Installation Script: Open port 8080
sudo hostnamectl set-hostname tomcat-Prod
sudo su - ec2-user
cd /opt 
sudo yum install git wget unzip vim -y
sudo yum install java-1.8.0-openjdk-devel -y
sudo wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.86/bin/apache-tomcat-9.0.86.zip
sudo unzip apache-tomcat-9.0.86.zip
sudo rm -rf apache-tomcat-9.0.86.zip
sudo mv apache-tomcat-9.0.86 tomcat9 
sudo chmod 777 -R /opt/tomcat9
sudo chown ec2-user -R /opt/tomcat9
sh /opt/tomcat9/bin/startup.sh
sudo su - ec2-user

Configure Tomcat:
  1. Enable external tomcat mgt access:

  By default tomcat can only be managed from localhost.
  Run the below command and commnt the lines.

vi /opt/tomcat9/webapps/manager/META-INF/context.xml

  from:
  <Valve className="org.apache.catalina.valves.RemoteAddrValve"
          allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" /
to:
<!--
  <Valve className="org.apache.catalina.valves.RemoteAddrValve"
          allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" /
-->
This will comment those two lines. (<!--  -->) 

  2. Create tomcat users with access roles:

    vi /opt/tomcat9/conf/tomcat-users.xml
    Add users before the close of the users tag:
      Note: out of the commented lines.
      </tomcat-users> 

 <user username="ayafor" password="admin123" roles="manager-gui,admin-gui,manager-script"/>
 <user username="kris" password="admin123" roles="admin-gui"/>

On Jenkins UI:
Steps:
Install Plugin
Generate Pipeline syntax
  Sample Step: deploy:Deploy war/ear to a container
    - WAR/EAR file: target/*war
    - Add container: Tomcat9.x
    - Credentials: tomcatCred
    - Tomcat server URL: IP:port

Tomcat Users for UAT:
vi /opt/tomcat9/conf/tomcat-users

<user username="ayafor" password="admin123" roles="manager-gui,admin-gui,manager-script"/>
 <user username="kris" password="admin123" roles="admin-gui"/>
Generate
Add to: DeployToUAT
stage('5. deployToUAT'){}

Follow the steps
See video
Build Now.


Stage 6. Manual Approval:
  (Continuous Delivery)
   Automated Approval = Continuous Deployment

stage('6. Manual Approval'){
  sh "echo 'Please review and approve' "
  timeout(time: 360 , unit: 'MINUTES')
  {
    input message: 'Application ready for deployment, Please review'
  }
}

Stage 7. Deploy to tomcat-Prod:

Configure a second tomcat server to be used for prod 
Follow same steps as above. (UAT)

Tomcat Users for Prod:  
<user username="george" password="admin123" roles="manager-gui,admin-gui,manager-script"/>
 <user username="kris" password="admin123" roles="admin-gui"/>

Stage 8. NOTIFICATION:
  Slack Notification:
  Manage Jenkins ->
       Plugins - Available Plugins
    Search -> Slack Notification
           -> Install

On Slack: Create New Channel 
         -> Go to Tools & Settings
         -> Manage Apps
         -> On the search bar type JenkinsCI
         -> Add Slack
         Choose Channel (the team;s channel)
         Follow the steps.

         On Jenkins UI, Manage Jenkins, System -> Slack
         Create credential (secret text)
    On generate pipeline syntax, select slackSend:Send Slack Message
    Channel: channelName
    Message: Write your Message: For Example: Deployment Successful.



node{
def mavenHome = tool name: 'maven3.9.6'
 stage('1. cloneCode'){
  git branch: 'main', credentialsId: 'gitJenkinsCred', url: 'https://github.com/ayafor-code/javaWebApp.git'
 }
 stage('2. mavenBuild') {
  //sh /var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven3.9.6/bin/mvn package
  sh "${mavenHome}/bin/mvn package"
}
 stage('3. codeQualityAnalysis'){
  sh "${mavenHome}/bin/mvn sonar:sonar"
  //edit the pom.xml file with SonarQube server credentils(propertiesTAG)
}
 stage('4. uploadArtifacts'){
  sh "${mavenHome}/bin/mvn deploy"
  //modify the distributionManagement tag in pom.xml
} 
 stage('5. deployToUAT'){
  deploy adapters: [tomcat9(credentialsId: 'tomcatUATPipeline', path: '', url: 'http://3.128.168.57:8080/')], contextPath: null, war: 'target/*war'
 }
 stage('6. manualApproval'){
  sh "echo 'Please review and give us feedback' "
  timeout(time: 360 , unit: 'MINUTES')
  {
    input message: 'Application Ready for Deployment, please review'
  }
 }
 stage('7. deployToprod'){
  deploy adapters: [tomcat9(credentialsId: 'tomcatProdPipeline', path: '', url: 'http://3.12.107.38:8080/')], contextPath: null, war: 'target/*war'
 }
 stage('8. notification'){
  slackSend channel: 'devops101', message: 'LINKTOURS DEPLOYMENT SUCCESSFUL. CONGRATS!!!'
 }
}



---
Push to UAT:
============
INSTALL JENKINS:

#!/bin/bash

# Update system
sudo apt update -y
sudo apt upgrade -y

# Install Java (Jenkins requires Java 11+)
sudo apt install openjdk-17-jdk -y

# Add Jenkins repository key and source
curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null

echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

# Update and install Jenkins
sudo apt update -y
sudo apt install jenkins -y

# Start and enable Jenkins
sudo systemctl restart jenkins
sudo systemctl enable jenkins


sudo cat /var/lib/jenkins/secrets/initialAdminPassword

Project Repo:

https://github.com/ayafor-code/javabuild.git


  node {
  def mavenHome = tool name: 'maven3.9.11'
  def imageName = "zenithafrica/mlink"
  def imageTag = "v1.0.0"
  def dockerImage = "${imageName}:v1.0.0"
  
  stage('1. Clone Code'){
      git branch: 'main', credentialsId: 'github-cred', url: 'https://github.com/ayafor-code/javabuild.git'
  }
  stage('2. Maven Build'){
      sh "${mavenHome}/bin/mvn package"
  }
  stage('3. Build Docker Image'){
      sh "docker build -t ${imageName}:v1.0.0 ." 
  }
  stage('4. Docker Login'){
      withCredentials([usernamePassword(credentialsId: 'docker-cred', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
        sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
      }
}
 stage('5. Docker Push'){
     sh "docker push ${dockerImage}"
 }
 stage('6. Docker logout'){
     sh 'docker logout'
    }
      
  }
 



